// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('sigma', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').usingServer('http://localhost:4444/wd/hub').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('sigma', async function() {
    // Test name: sigma
    // Step # | name | target | value
    // 1 | open | / | 
    await driver.get("http://localhost:5173/")
    // 2 | setWindowSize | 1936x1048 | 
    await driver.manage().window().setRect({ width: 1936, height: 1048 })
    // 3 | click | css=.sc-guDLey:nth-child(2) | 
    await driver.findElement(By.css(".sc-guDLey:nth-child(2)")).click()
    // 4 | type | css=.sc-guDLey:nth-child(2) | teste@yahoo.com
    await driver.findElement(By.css(".sc-guDLey:nth-child(2)")).sendKeys("teste@yahoo.com")
    // 5 | type | css=.sc-guDLey:nth-child(3) | 123456
    await driver.findElement(By.css(".sc-guDLey:nth-child(3)")).sendKeys("123456")
    // 6 | sendKeys | css=.sc-guDLey:nth-child(3) | ${KEY_ENTER}
    await driver.findElement(By.css(".sc-guDLey:nth-child(3)")).sendKeys(Key.ENTER)
    // 7 | click | id=atendimentos | 
    await driver.findElement(By.id("atendimentos")).click()
    // 8 | click | id=atendimentos | 
    await driver.findElement(By.id("atendimentos")).click()
    // 9 | click | id=atendimentos | 
    await driver.findElement(By.id("atendimentos")).click()
    // 10 | click | id=atendimentos | 
    await driver.findElement(By.id("atendimentos")).click()
    // 11 | click | id=atendimentos | 
    await driver.findElement(By.id("atendimentos")).click()
    // 12 | click | id=atendimentos | 
    await driver.findElement(By.id("atendimentos")).click()
    // 13 | click | id=atendimentos | 
    await driver.findElement(By.id("atendimentos")).click()
    // 14 | click | id=attendance | 
    await driver.findElement(By.id("attendance")).click()
    // 15 | click | id=attendance | 
    await driver.findElement(By.id("attendance")).click()
    // 16 | click | id=attendance | 
    await driver.findElement(By.id("attendance")).click()
    // 17 | click | id=specialties | 
    await driver.findElement(By.id("specialties")).click()
    // 18 | click | id=specialties | 
    await driver.findElement(By.id("specialties")).click()
    // 19 | click | id=acquisitions | 
    await driver.findElement(By.id("acquisitions")).click()
    // 20 | click | id=acquisitions | 
    await driver.findElement(By.id("acquisitions")).click()
    // 21 | click | css=.sc-hABBmJ:nth-child(1) > .sc-fmKFGs | 
    await driver.findElement(By.css(".sc-hABBmJ:nth-child(1) > .sc-fmKFGs")).click()
    // 22 | mouseOver | css=.sc-hABBmJ:nth-child(1) > .sc-fmKFGs | 
    {
      const element = await driver.findElement(By.css(".sc-hABBmJ:nth-child(1) > .sc-fmKFGs"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 23 | mouseOut | css=.sc-hABBmJ:nth-child(1) > .sc-fmKFGs | 
    {
      const element = await driver.findElement(By.CSS_SELECTOR, "body")
      await driver.actions({ bridge: true }).moveToElement(element, 0, 0).perform()
    }
    // 24 | click | css=.sc-fLseNd:nth-child(1) > .sc-bBkKde:nth-child(1) | 
    await driver.findElement(By.css(".sc-fLseNd:nth-child(1) > .sc-bBkKde:nth-child(1)")).click()
    // 25 | click | css=.sc-bZHSRq | 
    await driver.findElement(By.css(".sc-bZHSRq")).click()
    // 26 | type | css=.sc-bZHSRq | Consulta tudo em ordem.
    await driver.findElement(By.css(".sc-bZHSRq")).sendKeys("Consulta tudo em ordem.")
    // 27 | click | css=.sc-ilxebA:nth-child(2) | 
    await driver.findElement(By.css(".sc-ilxebA:nth-child(2)")).click()
    // 28 | assertAlert | Resumo atualizado com sucesso! | 
    assert(await driver.switchTo().alert().getText() == "Resumo atualizado com sucesso!")
    // 29 | click | css=.sc-fLseNd:nth-child(1) > .sc-bBkKde:nth-child(2) | 
    await driver.findElement(By.css(".sc-fLseNd:nth-child(1) > .sc-bBkKde:nth-child(2)")).click()
    // 30 | click | css=.sc-ilxebA:nth-child(1) | 
    await driver.findElement(By.css(".sc-ilxebA:nth-child(1)")).click()
    // 31 | click | css=.sc-hABBmJ:nth-child(3) > .sc-fmKFGs | 
    await driver.findElement(By.css(".sc-hABBmJ:nth-child(3) > .sc-fmKFGs")).click()
    // 32 | mouseOver | css=.sc-hABBmJ:nth-child(3) > .sc-fmKFGs | 
    {
      const element = await driver.findElement(By.css(".sc-hABBmJ:nth-child(3) > .sc-fmKFGs"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    // 33 | click | id=nomebar | 
    await driver.findElement(By.id("nomebar")).click()
    // 34 | type | id=nomebar | gabriel
    await driver.findElement(By.id("nomebar")).sendKeys("gabriel")
    // 35 | click | id=emailbar | 
    await driver.findElement(By.id("emailbar")).click()
    // 36 | type | id=emailbar | gabriel.santana@uscsonline.com.br
    await driver.findElement(By.id("emailbar")).sendKeys("gabriel.santana@uscsonline.com.br")
    // 37 | click | id=mensagembar | 
    await driver.findElement(By.id("mensagembar")).click()
    // 38 | type | id=mensagembar | Preciso de suporte no notebook.
    await driver.findElement(By.id("mensagembar")).sendKeys("Preciso de suporte no notebook.")
    // 39 | click | css=.btEnviar | 
    await driver.findElement(By.css(".btEnviar")).click()
    // 40 | assertAlert | Mensagem enviada com sucesso! | 
    assert(await driver.switchTo().alert().getText() == "Mensagem enviada com sucesso!")
    // 41 | click | css=.sc-hABBmJ:nth-child(4) > .sc-fmKFGs | 
    await driver.findElement(By.css(".sc-hABBmJ:nth-child(4) > .sc-fmKFGs")).click()
  })
})
